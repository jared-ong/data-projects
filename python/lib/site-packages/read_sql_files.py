"""Module is used to reads SQL files in a directory path."""
from pathlib import Path
import os
import hashlib
import re
import pandas as pd


def get_file_content(full_path):
    """Return the content of the file as a string."""
    with open(full_path,
              encoding="utf-8-sig",
              errors="backslashreplace") as the_file:
        # Return as string.
        data = the_file.read()
        # Special case to handle ucs-2 be BOM files.
        if '\\xff\\xfe' in data:
            the_file = open(full_path,
                            encoding="utf-16",
                            errors="backslashreplace")
            data = the_file.read()
        return data


def read_sql_files_to_dataframe(directory_path):
    """Recursive function to read .sql files into a dataframe."""
    file_ends_with = '.sql'
    glob_pattern = '**/*' + file_ends_with
    # Define the list of lists to use to create the dataframe
    datalist = []
    # First list is the column headers for later use in the dataframe
    headers = ('full_path',
               'dir_path',
               'file_name',
               'file_content',
               'file_content_hash',
               'file_size')
    # Recursive listing of all files matching glob_pattern
    pathlist = Path(directory_path).glob(glob_pattern)
    for path in pathlist:
        # Because path is object not string
        path = str(path)
        split_path = os.path.split(os.path.abspath(path))
        dir_path = split_path[0]
        file_name = split_path[1]
        file_content = get_file_content(path)
        # Replace sql comments with nothing
        file_content = re.sub(r"(--.*)|(((/\*)+?[\w\W]+?(\*/)+))",
                              "",
                              file_content)
        the_hash = hashlib.md5(file_content.encode('utf-8'))
        file_content_hash = the_hash.hexdigest()
        file_size = os.path.getsize(path)
        # Append tuple
        datalist.append((path,
                         dir_path,
                         file_name,
                         file_content,
                         file_content_hash,
                         file_size))
        print(path)
    df1 = pd.DataFrame(datalist, columns=headers)
    return df1
